<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Where am I]]></title>
  <link href="http://chrishyx.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://chrishyx.github.com/"/>
  <updated>2013-03-24T22:05:13+08:00</updated>
  <id>http://chrishyx.github.com/</id>
  <author>
    <name><![CDATA[yaxin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[introduce to guice]]></title>
    <link href="http://chrishyx.github.com/blog/2013/03/23/introduce-to-guice/"/>
    <updated>2013-03-23T22:54:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/03/23/introduce-to-guice</id>
    <content type="html"><![CDATA[<p>很早之前就听说过google开源的IOC框架，轻量级、效率高，却一直没关注过（因为貌似用的人也不多）。这次因为看58同城开源的argo是采用guice的，所以决定先了解一下guice。</p>

<p>先看一个wiki上的例子，main函数是这样的
```java
public static void main(String[] args) {</p>

<pre><code>Injector injector = Guice.createInjector(new BillingModule());
RealBillingService billingService = injector.getInstance(RealBillingService.class);
...
</code></pre>

<p>}
<code>
Injector是一个提供对bean factory访问的借口。从BillingModule的命名可以看出，Guice建议代码应该是模块化的，配置也应该是模块化的。Guice必然是支持模块化的，所以Guice的接口是
</code>java
public static Injector createInjector(Module... modules);
<code>
那么module的实现就应该是Guice指明接口和实现类对应关系的地方了。wiki上例子中的BillingModule是这样的
</code>java
public class BillingModule extends AbstractModule{</p>

<pre><code>@Override
protected void configure(){
    bind(TransactionLog.class).to(DatabaseTransactionLog.class);
    bind(CrediCardProcessor.class)to(PaypalCreditCardProcessor.class);
}
</code></pre>

<p>}
<code>
Module类在configure方法中指明了接口和实现类的对应。这儿的设计有点借鉴objective c的味道，只是objective c中，bind xxx to xxx是一个函数，这是两个，如果只写bind没有to是没有语法错误的，不知道会不会有语意错？或者可以autowired？另外，这里还有一个in scope的概念，//TODO
业务类的实现
</code>java
class RealBillingService implements BillingService{</p>

<pre><code>private final CreditCardProcessor processor;
private final TransactionLog transactionLog;

@Inject
RealBillingService(CreditCardProcessor processor, TransactionLog transactionLog){
    this.processor = processor;
    this.transactionLog = transactionLog;
}
...
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用iframe实现download]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/06/shi-yong-iframeshi-xian-download/"/>
    <updated>2013-02-06T00:12:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/06/shi-yong-iframeshi-xian-download</id>
    <content type="html"><![CDATA[<p>现代web项目中，下载无疑是最基本最普遍的功能之一，只是在以一些纯js框架（例如ExtJS，现在貌似叫sencha了）生成的界面中，不方便直接用超链接的方式去实现下载，那么我们可以在页面中隐藏一个iframe，然后在js中需要的地方去给iframe赋予一个url。具体实现如下：</p>

<p>jsp代码
```javascript</p>

<iframe id="downloadiframe">
```

js代码（以ExtJS3为例）
```javascript
downloadiframe.location.href="../../xxxx.do";
```

java代码

```java
response.setCharacterEncoding("gb2312");//处理中文
response.reset(); 
response.setContentType("application/x-download");

String path = outfile.getAbsolutePath();
int last1 = path.lastIndexOf("\\"); 
int last2 = path.lastIndexOf("/"); 
String filedisplay = path.substring((last1 > last2 ? last1 : last2) + 1); 
filedisplay = URLEncoder.encode(filedisplay, "UTF-8"); 

response.addHeader("Content-Disposition", "attachment;filename=" + filedisplay); 
OutputStream outp = null; 
FileInputStream in = null; 
File fp = new File(path); 
try { 
    outp = response.getOutputStream(); 
    in = new FileInputStream(fp); 
    byte[] b = new byte[1024]; 
    int i = 0; 
    while ((i = in.read(b)) > 0) { 
        outp.write(b, 0, i); 
    } 
    outp.flush(); 
} finally { 
    in.close(); 
    outp.close(); 
}
```

]]></content>
  </entry>
  
</feed>
