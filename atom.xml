<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Where am I]]></title>
  <link href="http://chrishyx.github.com/atom.xml" rel="self"/>
  <link href="http://chrishyx.github.com/"/>
  <updated>2013-03-24T22:05:13+08:00</updated>
  <id>http://chrishyx.github.com/</id>
  <author>
    <name><![CDATA[yaxin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[introduce to guice]]></title>
    <link href="http://chrishyx.github.com/blog/2013/03/23/introduce-to-guice/"/>
    <updated>2013-03-23T22:54:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/03/23/introduce-to-guice</id>
    <content type="html"><![CDATA[<p>很早之前就听说过google开源的IOC框架，轻量级、效率高，却一直没关注过（因为貌似用的人也不多）。这次因为看58同城开源的argo是采用guice的，所以决定先了解一下guice。</p>

<p>先看一个wiki上的例子，main函数是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Injector</span> <span class="n">injector</span> <span class="o">=</span> <span class="n">Guice</span><span class="o">.</span><span class="na">createInjector</span><span class="o">(</span><span class="k">new</span> <span class="n">BillingModule</span><span class="o">());</span>
</span><span class='line'>    <span class="n">RealBillingService</span> <span class="n">billingService</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">RealBillingService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Injector是一个提供对bean factory访问的借口。从BillingModule的命名可以看出，Guice建议代码应该是模块化的，配置也应该是模块化的。Guice必然是支持模块化的，所以Guice的接口是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Injector</span> <span class="nf">createInjector</span><span class="o">(</span><span class="n">Module</span><span class="o">...</span> <span class="n">modules</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么module的实现就应该是Guice指明接口和实现类对应关系的地方了。wiki上例子中的BillingModule是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BillingModule</span> <span class="kd">extends</span> <span class="n">AbstractModule</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">TransactionLog</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">DatabaseTransactionLog</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">CrediCardProcessor</span><span class="o">.</span><span class="na">class</span><span class="o">)</span><span class="n">to</span><span class="o">(</span><span class="n">PaypalCreditCardProcessor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Module类在configure方法中指明了接口和实现类的对应。这儿的设计有点借鉴objective c的味道，只是objective c中，bind xxx to xxx是一个函数，这是两个，如果只写bind没有to是没有语法错误的，不知道会不会有语意错？或者可以autowired？另外，这里还有一个in scope的概念，//TODO
业务类的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">RealBillingService</span> <span class="kd">implements</span> <span class="n">BillingService</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CreditCardProcessor</span> <span class="n">processor</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">TransactionLog</span> <span class="n">transactionLog</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="n">RealBillingService</span><span class="o">(</span><span class="n">CreditCardProcessor</span> <span class="n">processor</span><span class="o">,</span> <span class="n">TransactionLog</span> <span class="n">transactionLog</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">processor</span> <span class="o">=</span> <span class="n">processor</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">transactionLog</span> <span class="o">=</span> <span class="n">transactionLog</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be lazy with clojure]]></title>
    <link href="http://chrishyx.github.com/blog/2013/03/21/be-lazy-with-clojure/"/>
    <updated>2013-03-21T15:35:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/03/21/be-lazy-with-clojure</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">stack-consuming-fibo</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'>   <span class="ss">:else</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">stack-consuming-fibo</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">stack-consuming-fibo</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tail-fibo</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">fib</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">current</span> <span class="nb">next </span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>              <span class="nv">current</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">fib</span> <span class="nb">next </span><span class="p">(</span><span class="nb">+ </span><span class="nv">current</span> <span class="nv">next</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">fib</span> <span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">recur-fibo</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">fib</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">current</span> <span class="nb">next </span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">current</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">recur</span> <span class="nb">next </span><span class="p">(</span><span class="nb">+ </span><span class="nv">current</span> <span class="nv">next</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">fib</span> <span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">lazy-seq-fibo</span>
</span><span class='line'>  <span class="p">([]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">concat </span><span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="p">(</span><span class="nf">lazy-seq-fibo</span> <span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)]</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">lazy-seq</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">cons </span><span class="nv">n</span> <span class="p">(</span><span class="nf">lazy-seq-fibo</span> <span class="nv">b</span> <span class="nv">n</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fibo</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map first </span><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span> <span class="p">[</span><span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span><span class="p">])))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/27/emacs/"/>
    <updated>2013-02-27T11:07:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/27/emacs</id>
    <content type="html"><![CDATA[<p>prelude</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Develop]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/27/clojure-develop/"/>
    <updated>2013-02-27T00:00:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/27/clojure-develop</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[long varchar in DB2]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/06/long-varchar-in-db2/"/>
    <updated>2013-02-06T00:55:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/06/long-varchar-in-db2</id>
    <content type="html"><![CDATA[<p>DB2 中LONG VARCHAR 与VARCHAR 数据类型都用来存储长文本，但是它们之间的用法有很大不同。VARCHAR 与普通数据类型一样，要使用到bufferpool，在创建表时受制于最大的bufferpool page size，而LONG VARCHAR 则与LOB数据一样，有单独的存储区域，不需要使用bufferpool，所以在创建表时也不需要有大的bufferpool存在，在访问这些数据时，直接操作磁盘IO进行存取，所以速度更快。但LONG VARCHAR 数据类型的使用也相应受到限制，不能用在以下语句中：</p>

<ul>
<li>DISTINCT</li>
<li>GROUP BY</li>
<li>ORDER BY</li>
<li>BETWEEN/IN</li>
<li>LIKE</li>
<li>子查询内部</li>
<li>列函数中</li>
</ul>


<p>LONG VARCHAR 允许的数据最大长度为32700字节，VARCHAR 最大允许32672字节。在CLP与CE中操作LONG VARCHAR 会有一些不期盼的事情发生，比如对于长度大于8192字节的LONG VARCHAR列使用以下语句，会导致截断，并且不给出任何warning。</p>

<p><code>SELECT longvarchar FROM table</code>
使用以下语句也是不安全的，因为一旦列长度超出VARCHAR 允许的最大长度32672，语句将会失败。</p>

<p><code>SELECT VARCHAR(longvarchar) FROM table</code>
安全的写法是使用表达式CAST.</p>

<p><code>SELECT CAST(langvarchar AS VARCHAR(32672)) FROM table</code>
以上内容适用于DB2 版本8以及版本9。</p>

<p>longvarchar 字段在where条件中可以用like，不能用＝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[db2 install]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/06/db2-install/"/>
    <updated>2013-02-06T00:35:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/06/db2-install</id>
    <content type="html"><![CDATA[<p>曾经遇到一个项目指定使用DB2作为数据库，为此曾经尝试过在ubuntu、centos、windows下安装DB2，以及在线备份等。可惜长时间不用现在也都忘的七七八八了。不过，DB2这种数据库，忘了也罢，哈哈。。。</p>

<h2>ubuntu下安装</h2>

<p>很多人说一定要以root用户，否则不能启动控制中心。我不理解什么意思是sudo su - root，还是直接sudo就可以，反正我两种方法都没有试成功。
那就直接sudo ./db2_setup吧，一步步安装下来。</p>

<p>不要开启Ubuntu的特效，否则无法显示图形界面。</p>

<p>至于打开控制中心，可以这样做：
在一个shell运行xhost+
然后在另一个shell用实例用户登录，再export DISPALY=:0.0，就可以打开db2cc了。</p>

<p>启动的时候需要先以dasusr1用户启动db2admin，db2admin start。
再以db2inst1用户启动db2，db2start。</p>

<p>安装完成之后默认情况下貌似会有密码的问题</p>

<p>将/etc/pam.d/common-password文件中下面这行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>password success=1 default=ignore pam_unix.so obscure sha512 </span></code></pre></td></tr></table></div></figure>


<p>替换成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>password success=1 default=ignore pam_unix.so obscure md5 </span></code></pre></td></tr></table></div></figure>


<p>在SHELL中运行passwd命令更改密码。</p>

<p>因为ubuntu操作系统对密码采取了不同的HASH算法，很可能HASH后的密码串长度超过了DB2支持的最长密码长度。 所以将sha512的HASH算法改为sha256或者md5算法。</p>

<h2>windows7下安装</h2>

<p>以管理员权限运行安装程序，否则会出错，安装不成功。
安装完成后将用户添加到DB2ADMNS和DB2USER用户组，否则启动的时候会出错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用iframe实现download]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/06/shi-yong-iframeshi-xian-download/"/>
    <updated>2013-02-06T00:12:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/06/shi-yong-iframeshi-xian-download</id>
    <content type="html"><![CDATA[<p>现代web项目中，下载无疑是最基本最普遍的功能之一，只是在以一些纯js框架（例如ExtJS，现在貌似叫sencha了）生成的界面中，不方便直接用超链接的方式去实现下载，那么我们可以在页面中隐藏一个iframe，然后在js中需要的地方去给iframe赋予一个url。具体实现如下：</p>

<p>jsp代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">iframe</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;downloadiframe&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>js代码（以ExtJS3为例）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">downloadiframe</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;../../xxxx.do&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>java代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&quot;gb2312&quot;</span><span class="o">);</span><span class="c1">//处理中文</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;application/x-download&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">outfile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">last1</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&quot;\\&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">last2</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">filedisplay</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">substring</span><span class="o">((</span><span class="n">last1</span> <span class="o">&gt;</span> <span class="n">last2</span> <span class="o">?</span> <span class="n">last1</span> <span class="o">:</span> <span class="n">last2</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">filedisplay</span> <span class="o">=</span> <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">filedisplay</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;Content-Disposition&quot;</span><span class="o">,</span> <span class="s">&quot;attachment;filename=&quot;</span> <span class="o">+</span> <span class="n">filedisplay</span><span class="o">);</span>
</span><span class='line'><span class="n">OutputStream</span> <span class="n">outp</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">FileInputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">File</span> <span class="n">fp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outp</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span><span class='line'>  <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">fp</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">((</span><span class="n">i</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">b</span><span class="o">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">outp</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">outp</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="n">outp</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下内核更新以后virtualbox的重配置]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/05/ubuntuxia-nei-he-geng-xin-yi-hou-virtualboxde-zhong-pei-zhi/"/>
    <updated>2013-02-05T23:47:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/05/ubuntuxia-nei-he-geng-xin-yi-hou-virtualboxde-zhong-pei-zhi</id>
    <content type="html"><![CDATA[<p>随着 Ubuntu 系统内核的更新，VirtualBox 原有的内核模块已经不再适用。于是，VirtualBox 将无法正常使用。需要重新安装 VirtualBox 吗？当然不必。我们只需重新稍加配置即可。</p>

<p>首先获取与当前内核版本相一致的头文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install linux-headers-`uname -r` </span></code></pre></td></tr></table></div></figure>


<p>接着，我们来重新编译 VirtualBox 内核模块，这可以使用下面的指令完成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /etc/init.d/vboxdrv setup </span></code></pre></td></tr></table></div></figure>


<p>一旦编译完成，程序将会自动启动 vboxdrv 内核模块。此时，再用 VirtualBox 也就没有什么问题了。如果以后遇到内核再次重新的情况，则如法炮制即可解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello octopress]]></title>
    <link href="http://chrishyx.github.com/blog/2013/02/01/hello-octopress/"/>
    <updated>2013-02-01T00:39:00+08:00</updated>
    <id>http://chrishyx.github.com/blog/2013/02/01/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is my first octopress blog!</p>

<!-- more -->


<p>曾经csdn、javaeye、oschina和自己搭建的wordpress上都陆续写过或者转载过一些博客，却一直没有坚持下来，一方面是自己的懒惰，另一面没有特别合适的方式也是个问题。这次把以前所有blog里有价值的东西整理到这儿来，以后好好耕耘这个自留地。</p>
]]></content>
  </entry>
  
</feed>
